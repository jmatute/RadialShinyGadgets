helperValues$plotLimit <- 1.5
helperValues$projectionMatrix <- initProjectionMatrix(data, projMatrix)
helperValues$lbl <- NULL
helperValues$cumulativeList <-  NULL
helperValues$rangedData <- NULL
helperValues$hints <- NULL
observeEvent( input$plot_hover, {
helperValues$curX <- input$plot_hover$x
helperValues$curY <- input$plot_hover$y
currentClosest <- closestDimension(helperValues$projectionMatrix, helperValues$curX, helperValues$curY )
if (helperValues$clicked ){
session$resetBrush("plotBrush")
helperValues$projectionMatrix[helperValues$movingDim,1:2] <- c(helperValues$curX, helperValues$curY)
if (approach == "OSC"){
helperValues$projectionMatrix <- OSCRecondition(helperValues$projectionMatrix)
}
highlightedIdx(helperValues$movingDim)
}
else {
highlightedIdx(currentClosest)
}
if (!is.null(highlightedCatValue())){
helperValues$lbl <- NULL
}
})
observeEvent(input$plotDblClick,{
if(!numericRepresentation){
if ( highlightedCat() != -1){
nameDim <- colnames(data)[highlightedCat()]
inside <- insideCategoricalValueList(helperValues$projectionMatrix, nameDim, helperValues$cumulativeList, helperValues$curX, helperValues$curY )
helperValues$lbl <-  insideCategoricalValueGG(helperValues$projectionMatrix, nameDim, helperValues$cumulativeList, inside)
currentOrder <- helperValues$cumulativeList[[nameDim]]$order
y
cat(file=stderr(), "double clicked at", nameDim, "\n")
if (sum(inside) > 0){
cat(file=stderr(), "inside \n")
selectedCatValue <-  currentOrder[which(inside)]
if(is.null( highlightedCatValue() )){
highlightedCatValue(selectedCatValue)
}
else if (!(selectedCatValue %in% highlightedCatValue()) ){
newOrder <- swap(currentOrder, selectedCatValue, highlightedCatValue())
helperValues$cumulativeList[[nameDim]] <- getCumulativeTable(frequencyList[[nameDim]], newOrder)
helperValues$rangedData <- getRangedData(data, numericRepresentation, meanCentered, frequencyList, helperValues$cumulativeList)
highlightedCatValue(NULL)
helperValues$lbl <-  NULL
}
else {
helperValues$lbl <-  NULL
highlightedCatValue(NULL)
}
}
}
currentClosest <- closestDimension(helperValues$projectionMatrix, input$plotDblClick$x, input$plotDblClick$y )
if ( currentClosest != -1){
nameDim <- colnames(data)[currentClosest]
# cat(file=stderr(), "double clicked at", nameDim, "\n")
if( is.factor(data[[nameDim]])){
if  ( highlightedCat() != -1){
highlightedCat(-y1)
helperValues$lbl <- NULL
highlightedCatValue(NULL)
}
else {
highlightedCat(currentClosest)
}
}
}
}
})
mouseDown <- function(){
currentClosest <- closestDimension(helperValues$projectionMatrix, helperValues$curX, helperValues$curY )
if ( currentClosest != -1){
helperValues$movingDim <- currentClosest
helperValues$clicked <- TRUE
}
helperValues$hints = NULL
}
mouseUp <- function(){
helperValues$clicked <- FALSE
helperValues$movingDim <- -1
}
initCumulative <- function(){
if (!is.null( frequencyList) && is.null(helperValues$cumulativeList)){
helperValues$cumulativeList <- list()
catVars <- names(frequencyList)
for( catName in catVars){
cumulativeTable <- getCumulativeTable(frequencyList[[catName]])
helperValues$cumulativeList[[catName]] <- cumulativeTable
}
helperValues$rangedData <- getRangedData(data, numericRepresentation, meanCentered, frequencyList, helperValues$cumulativeList)
}
if( numericRepresentation && is.null( helperValues$rangedData )){
helperValues$rangedData <- getRangedData(data, numericRepresentation, meanCentered)
}
}
output$plot <- renderPlot({
initCumulative()
curPlot <- drawDimensionVectors(helperValues$projectionMatrix, highlightedIdx(), highlightedCat(), highlightedCatValue(),  helperValues$cumulativeList )
if (!is.null(helperValues$lbl))
curPlot <- curPlot + helperValues$lbl
if (!is.null(helperValues$hints))
curPlot <- curPlot + helperValues$hints
curPlot + getGGProjectedPoints(helperValues$projectionMatrix, helperValues$rangedData , odata, colorVar) +
coord_cartesian(xlim = c(-helperValues$plotLimit,helperValues$plotLimit ), ylim = c(-helperValues$plotLimit,helperValues$plotLimit ))
},res=96)
observeEvent(input$cancel, {
stopApp(NULL)
})
observeEvent(input$hint, {
actions <- getActionHints(helperValues$projectionMatrix, helperValues$rangedData, odata, colorVar , clusterFunc)
updateActionButton(session, "hint", label = paste0("Hint. Max(",formatC(max(actions$diff), format = "e",  digits = 2), ")"))
if (max(actions$diff) > 0){
helperValues$hints <- getGGHints(helperValues$projectionMatrix, actions)
}
else {
helperValues$hints <- NULL
}
})
onevent("mouseup", "plot", mouseUp())
onevent("mousedown","plot", mouseDown())
observeEvent(input$zoomIn,{ helperValues$plotLimit <-  helperValues$plotLimit*0.9 })
observeEvent(input$zoomOut,{ helperValues$plotLimit <-  helperValues$plotLimit*1.1 })
observeEvent(input$done, {
projMatrix <- getCleanProjectionMatrix(helperValues$projectionMatrix, colorVar, odata, data)
projectedPoints <- getProjectedPoints(helperValues$projectionMatrix, helperValues$rangedData )
selected <- brushedPoints(projectedPoints, input$plotBrush, allRows = TRUE )
result <- list(projMatrix, selected$selected_, projectedPoints)
names(result) <- c("Proj.Matrix","Selection","Projected.Points")
stopApp(result)
})
}
runGadget(ui, server)
}
data(iris)
iris[5,2] <- NA
print(iris)
tiris <- removeNonZeroAndMissing(iris)
iris[5,2] <- NA
StarCoordinates(iris)
source("./R/utils.R")
library(datasets)
library(clValid)
data(iris)
nDunn <- function(data, labels){
invisible(dunn(clusters=labels,Data=data))
}
StarCoordinates <- function(data, numericRepresentation=TRUE, colorVar = NULL, meanCentered = TRUE, approach="Standard", projMatrix=NULL, clusterFunc = NULL) {
#######################################################################
inputCheck <- errorCatching(data,  colorVar,  approach, projectionMatrix )
if (!is.null(inputCheck)){
if (inputCheck$stop)  stop(inputCheck$errorMessage)
else warning(inputCheck$errorMessage)
}
data <- removeNonZeroAndMissing(data)
odata <- data
frequencyList <- NULL
if (!is.null(colorVar)){
data[[colorVar]] <- NULL
}
if(numericRepresentation){
data <-  mutate_if(data, is.factor, as.numeric)
}
else {
frequencyList <- getFrequencyList(data)
}
######################################################################
ui <- miniPage(
useShinyjs(),
gadgetTitleBar("Star Coordinates"),
miniContentPanel(
plotOutput("plot", height = "100%", brush="plotBrush", hover=hoverOpts(id="plot_hover", delayType="throttle", delay= 150),
dblclick = "plotDblClick")
),
miniButtonBlock(
actionButton("zoomIn","", icon = icon("search-plus")),
actionButton("zoomOut","", icon = icon("search-minus")),
if( !is.null(colorVar) && !is.null(clusterFunc))
actionButton("hint","Hint", icon = icon("map-signs")),
)
)
server <- function(input, output, session) {
highlightedIdx <- reactiveVal(-1)
highlightedCat <- reactiveVal(-1)
highlightedCatValue <- reactiveVal(value = NULL)
helperValues <- reactiveValues()
helperValues$clicked <- FALSE
helperValues$movingDim <- -1
helperValues$plotLimit <- 1.5
helperValues$projectionMatrix <- initProjectionMatrix(data, projMatrix)
helperValues$lbl <- NULL
helperValues$cumulativeList <-  NULL
helperValues$rangedData <- NULL
helperValues$hints <- NULL
observeEvent( input$plot_hover, {
helperValues$curX <- input$plot_hover$x
helperValues$curY <- input$plot_hover$y
currentClosest <- closestDimension(helperValues$projectionMatrix, helperValues$curX, helperValues$curY )
if (helperValues$clicked ){
session$resetBrush("plotBrush")
helperValues$projectionMatrix[helperValues$movingDim,1:2] <- c(helperValues$curX, helperValues$curY)
if (approach == "OSC"){
helperValues$projectionMatrix <- OSCRecondition(helperValues$projectionMatrix)
}
highlightedIdx(helperValues$movingDim)
}
else {
highlightedIdx(currentClosest)
}
if (!is.null(highlightedCatValue())){
helperValues$lbl <- NULL
}
})
observeEvent(input$plotDblClick,{
if(!numericRepresentation){
if ( highlightedCat() != -1){
nameDim <- colnames(data)[highlightedCat()]
inside <- insideCategoricalValueList(helperValues$projectionMatrix, nameDim, helperValues$cumulativeList, helperValues$curX, helperValues$curY )
helperValues$lbl <-  insideCategoricalValueGG(helperValues$projectionMatrix, nameDim, helperValues$cumulativeList, inside)
currentOrder <- helperValues$cumulativeList[[nameDim]]$order
y
cat(file=stderr(), "double clicked at", nameDim, "\n")
if (sum(inside) > 0){
cat(file=stderr(), "inside \n")
selectedCatValue <-  currentOrder[which(inside)]
if(is.null( highlightedCatValue() )){
highlightedCatValue(selectedCatValue)
}
else if (!(selectedCatValue %in% highlightedCatValue()) ){
newOrder <- swap(currentOrder, selectedCatValue, highlightedCatValue())
helperValues$cumulativeList[[nameDim]] <- getCumulativeTable(frequencyList[[nameDim]], newOrder)
helperValues$rangedData <- getRangedData(data, numericRepresentation, meanCentered, frequencyList, helperValues$cumulativeList)
highlightedCatValue(NULL)
helperValues$lbl <-  NULL
}
else {
helperValues$lbl <-  NULL
highlightedCatValue(NULL)
}
}
}
currentClosest <- closestDimension(helperValues$projectionMatrix, input$plotDblClick$x, input$plotDblClick$y )
if ( currentClosest != -1){
nameDim <- colnames(data)[currentClosest]
# cat(file=stderr(), "double clicked at", nameDim, "\n")
if( is.factor(data[[nameDim]])){
if  ( highlightedCat() != -1){
highlightedCat(-y1)
helperValues$lbl <- NULL
highlightedCatValue(NULL)
}
else {
highlightedCat(currentClosest)
}
}
}
}
})
mouseDown <- function(){
currentClosest <- closestDimension(helperValues$projectionMatrix, helperValues$curX, helperValues$curY )
if ( currentClosest != -1){
helperValues$movingDim <- currentClosest
helperValues$clicked <- TRUE
}
helperValues$hints = NULL
}
mouseUp <- function(){
helperValues$clicked <- FALSE
helperValues$movingDim <- -1
}
initCumulative <- function(){
if (!is.null( frequencyList) && is.null(helperValues$cumulativeList)){
helperValues$cumulativeList <- list()
catVars <- names(frequencyList)
for( catName in catVars){
cumulativeTable <- getCumulativeTable(frequencyList[[catName]])
helperValues$cumulativeList[[catName]] <- cumulativeTable
}
helperValues$rangedData <- getRangedData(data, numericRepresentation, meanCentered, frequencyList, helperValues$cumulativeList)
}
if( numericRepresentation && is.null( helperValues$rangedData )){
helperValues$rangedData <- getRangedData(data, numericRepresentation, meanCentered)
}
}
output$plot <- renderPlot({
initCumulative()
curPlot <- drawDimensionVectors(helperValues$projectionMatrix, highlightedIdx(), highlightedCat(), highlightedCatValue(),  helperValues$cumulativeList )
if (!is.null(helperValues$lbl))
curPlot <- curPlot + helperValues$lbl
if (!is.null(helperValues$hints))
curPlot <- curPlot + helperValues$hints
curPlot + getGGProjectedPoints(helperValues$projectionMatrix, helperValues$rangedData , odata, colorVar) +
coord_cartesian(xlim = c(-helperValues$plotLimit,helperValues$plotLimit ), ylim = c(-helperValues$plotLimit,helperValues$plotLimit ))
},res=96)
observeEvent(input$cancel, {
stopApp(NULL)
})
observeEvent(input$hint, {
actions <- getActionHints(helperValues$projectionMatrix, helperValues$rangedData, odata, colorVar , clusterFunc)
updateActionButton(session, "hint", label = paste0("Hint. Max(",formatC(max(actions$diff), format = "e",  digits = 2), ")"))
if (max(actions$diff) > 0){
helperValues$hints <- getGGHints(helperValues$projectionMatrix, actions)
}
else {
helperValues$hints <- NULL
}
})
onevent("mouseup", "plot", mouseUp())
onevent("mousedown","plot", mouseDown())
observeEvent(input$zoomIn,{ helperValues$plotLimit <-  helperValues$plotLimit*0.9 })
observeEvent(input$zoomOut,{ helperValues$plotLimit <-  helperValues$plotLimit*1.1 })
observeEvent(input$done, {
projMatrix <- getCleanProjectionMatrix(helperValues$projectionMatrix, colorVar, odata, data)
projectedPoints <- getProjectedPoints(helperValues$projectionMatrix, helperValues$rangedData )
selected <- brushedPoints(projectedPoints, input$plotBrush, allRows = TRUE )
result <- list(projMatrix, selected$selected_, projectedPoints)
names(result) <- c("Proj.Matrix","Selection","Projected.Points")
stopApp(result)
})
}
runGadget(ui, server)
}
data(iris)
iris[5,2] <- NA
StarCoordinates(iris)
source("./R/utils.R")
library(datasets)
library(clValid)
data(iris)
nDunn <- function(data, labels){
invisible(dunn(clusters=labels,Data=data))
}
StarCoordinates <- function(df, numericRepresentation=TRUE, colorVar = NULL, meanCentered = TRUE, approach="Standard", projMatrix=NULL, clusterFunc = NULL) {
#######################################################################
inputCheck <- errorCatching(df,  colorVar,  approach, projectionMatrix )
if (!is.null(inputCheck)){
if (inputCheck$stop)  stop(inputCheck$errorMessage)
else warning(inputCheck$errorMessage)
}
data <- removeNonZeroAndMissing(df)
odata <- df
frequencyList <- NULL
if (!is.null(colorVar)){
data[[colorVar]] <- NULL
}
if(numericRepresentation){
df <-  mutate_if(df, is.factor, as.numeric)
}
else {
frequencyList <- getFrequencyList(df)
}
######################################################################
ui <- miniPage(
useShinyjs(),
gadgetTitleBar("Star Coordinates"),
miniContentPanel(
plotOutput("plot", height = "100%", brush="plotBrush", hover=hoverOpts(id="plot_hover", delayType="throttle", delay= 150),
dblclick = "plotDblClick")
),
miniButtonBlock(
actionButton("zoomIn","", icon = icon("search-plus")),
actionButton("zoomOut","", icon = icon("search-minus")),
if( !is.null(colorVar) && !is.null(clusterFunc))
actionButton("hint","Hint", icon = icon("map-signs")),
)
)
server <- function(input, output, session) {
highlightedIdx <- reactiveVal(-1)
highlightedCat <- reactiveVal(-1)
highlightedCatValue <- reactiveVal(value = NULL)
helperValues <- reactiveValues()
helperValues$clicked <- FALSE
helperValues$movingDim <- -1
helperValues$plotLimit <- 1.5
helperValues$projectionMatrix <- initProjectionMatrix(df, projMatrix)
helperValues$lbl <- NULL
helperValues$cumulativeList <-  NULL
helperValues$rangedData <- NULL
helperValues$hints <- NULL
observeEvent( input$plot_hover, {
helperValues$curX <- input$plot_hover$x
helperValues$curY <- input$plot_hover$y
currentClosest <- closestDimension(helperValues$projectionMatrix, helperValues$curX, helperValues$curY )
if (helperValues$clicked ){
session$resetBrush("plotBrush")
helperValues$projectionMatrix[helperValues$movingDim,1:2] <- c(helperValues$curX, helperValues$curY)
if (approach == "OSC"){
helperValues$projectionMatrix <- OSCRecondition(helperValues$projectionMatrix)
}
highlightedIdx(helperValues$movingDim)
}
else {
highlightedIdx(currentClosest)
}
if (!is.null(highlightedCatValue())){
helperValues$lbl <- NULL
}
})
observeEvent(input$plotDblClick,{
if(!numericRepresentation){
if ( highlightedCat() != -1){
nameDim <- colnames(df)[highlightedCat()]
inside <- insideCategoricalValueList(helperValues$projectionMatrix, nameDim, helperValues$cumulativeList, helperValues$curX, helperValues$curY )
helperValues$lbl <-  insideCategoricalValueGG(helperValues$projectionMatrix, nameDim, helperValues$cumulativeList, inside)
currentOrder <- helperValues$cumulativeList[[nameDim]]$order
y
cat(file=stderr(), "double clicked at", nameDim, "\n")
if (sum(inside) > 0){
cat(file=stderr(), "inside \n")
selectedCatValue <-  currentOrder[which(inside)]
if(is.null( highlightedCatValue() )){
highlightedCatValue(selectedCatValue)
}
else if (!(selectedCatValue %in% highlightedCatValue()) ){
newOrder <- swap(currentOrder, selectedCatValue, highlightedCatValue())
helperValues$cumulativeList[[nameDim]] <- getCumulativeTable(frequencyList[[nameDim]], newOrder)
helperValues$rangedData <- getRangedData(df, numericRepresentation, meanCentered, frequencyList, helperValues$cumulativeList)
highlightedCatValue(NULL)
helperValues$lbl <-  NULL
}
else {
helperValues$lbl <-  NULL
highlightedCatValue(NULL)
}
}
}
currentClosest <- closestDimension(helperValues$projectionMatrix, input$plotDblClick$x, input$plotDblClick$y )
if ( currentClosest != -1){
nameDim <- colnames(df)[currentClosest]
# cat(file=stderr(), "double clicked at", nameDim, "\n")
if( is.factor(data[[nameDim]])){
if  ( highlightedCat() != -1){
highlightedCat(-y1)
helperValues$lbl <- NULL
highlightedCatValue(NULL)
}
else {
highlightedCat(currentClosest)
}
}
}
}
})
mouseDown <- function(){
currentClosest <- closestDimension(helperValues$projectionMatrix, helperValues$curX, helperValues$curY )
if ( currentClosest != -1){
helperValues$movingDim <- currentClosest
helperValues$clicked <- TRUE
}
helperValues$hints = NULL
}
mouseUp <- function(){
helperValues$clicked <- FALSE
helperValues$movingDim <- -1
}
initCumulative <- function(){
if (!is.null( frequencyList) && is.null(helperValues$cumulativeList)){
helperValues$cumulativeList <- list()
catVars <- names(frequencyList)
for( catName in catVars){
cumulativeTable <- getCumulativeTable(frequencyList[[catName]])
helperValues$cumulativeList[[catName]] <- cumulativeTable
}
helperValues$rangedData <- getRangedData(df, numericRepresentation, meanCentered, frequencyList, helperValues$cumulativeList)
}
if( numericRepresentation && is.null( helperValues$rangedData )){
helperValues$rangedData <- getRangedData(df, numericRepresentation, meanCentered)
}
}
output$plot <- renderPlot({
initCumulative()
curPlot <- drawDimensionVectors(helperValues$projectionMatrix, highlightedIdx(), highlightedCat(), highlightedCatValue(),  helperValues$cumulativeList )
if (!is.null(helperValues$lbl))
curPlot <- curPlot + helperValues$lbl
if (!is.null(helperValues$hints))
curPlot <- curPlot + helperValues$hints
curPlot + getGGProjectedPoints(helperValues$projectionMatrix, helperValues$rangedData , odata, colorVar) +
coord_cartesian(xlim = c(-helperValues$plotLimit,helperValues$plotLimit ), ylim = c(-helperValues$plotLimit,helperValues$plotLimit ))
},res=96)
observeEvent(input$cancel, {
stopApp(NULL)
})
observeEvent(input$hint, {
actions <- getActionHints(helperValues$projectionMatrix, helperValues$rangedData, odata, colorVar , clusterFunc)
updateActionButton(session, "hint", label = paste0("Hint. Max(",formatC(max(actions$diff), format = "e",  digits = 2), ")"))
if (max(actions$diff) > 0){
helperValues$hints <- getGGHints(helperValues$projectionMatrix, actions)
}
else {
helperValues$hints <- NULL
}
})
onevent("mouseup", "plot", mouseUp())
onevent("mousedown","plot", mouseDown())
observeEvent(input$zoomIn,{ helperValues$plotLimit <-  helperValues$plotLimit*0.9 })
observeEvent(input$zoomOut,{ helperValues$plotLimit <-  helperValues$plotLimit*1.1 })
observeEvent(input$done, {
projMatrix <- getCleanProjectionMatrix(helperValues$projectionMatrix, colorVar, odata, df)
projectedPoints <- getProjectedPoints(helperValues$projectionMatrix, helperValues$rangedData )
selected <- brushedPoints(projectedPoints, input$plotBrush, allRows = TRUE )
result <- list(projMatrix, selected$selected_, projectedPoints)
names(result) <- c("Proj.Matrix","Selection","Projected.Points")
stopApp(result)
})
}
runGadget(ui, server)
}
data(iris)
iris[5,2] <- NA
StarCoordinates(iris)
data(iris)
StarCoordinates(iris)
