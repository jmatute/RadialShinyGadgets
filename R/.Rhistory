curCumulativeTable  <- curCumulativeTable %>% mutate(bcx= (.data[[cumulativeName]] - .data[[cumulativeFreq]]) * dirVector$x )
if( length(cumulativeList) > 0){
catVars <- names(cumulativeList)
for( catName in catVars){
dirVector <- lines[paste0(catName,".1"),]
cumulativeName <- paste0(catName,".Cumulative")
cumulativeFreq <- paste0(catName,".freq")
ndirVector <- dirVector / sqrt(sum(dirVector^2))
ortho <- c(-ndirVector$y, ndirVector$x)
print(dirVector)
curCumulativeTable <- cumulativeList[[catName]]
curCumulativeTable  <- curCumulativeTable %>% mutate(cx= .data[[cumulativeName]] * dirVector$x )
%>% mutate(cy= .data[[cumulativeName]] * dirVector$y )
curCumulativeTable <- curCumulativeTable %>% mutate(sx = cx  +  0.02 * ortho[1]) %>% mutate(ex = cx +  -0.02 * ortho[1])
curCumulativeTable <- curCumulativeTable %>% mutate(sy = cy  +  0.02 * ortho[2]) %>% mutate(ey = cy +  -0.02 * ortho[2])
curCumulativeTable  <- curCumulativeTable %>% mutate(bcx= (.data[[cumulativeName]] - .data[[cumulativeFreq]]) * dirVector$x )
}
}
dirVector <- lines[paste0(catName,".1"),]
cumulativeName <- paste0(catName,".Cumulative")
cumulativeFreq <- paste0(catName,".freq")
ndirVector <- dirVector / sqrt(sum(dirVector^2))
ortho <- c(-ndirVector$y, ndirVector$x)
print(dirVector)
curCumulativeTable <- cumulativeList[[catName]]
curCumulativeTable  <- curCumulativeTable %>% mutate(cx= .data[[cumulativeName]] * dirVector$x )
%>% mutate(cy= .data[[cumulativeName]] * dirVector$y )
if( length(cumulativeList) > 0){
catVars <- names(cumulativeList)
for( catName in catVars){
dirVector <- lines[paste0(catName,".1"),]
cumulativeName <- paste0(catName,".Cumulative")
cumulativeFreq <- paste0(catName,".freq")
ndirVector <- dirVector / sqrt(sum(dirVector^2))
ortho <- c(-ndirVector$y, ndirVector$x)
print(dirVector)
curCumulativeTable <- cumulativeList[[catName]]
curCumulativeTable  <- curCumulativeTable %>% mutate(cx= .data[[cumulativeName]] * dirVector$x ) %>% mutate(cy= .data[[cumulativeName]] * dirVector$y )
curCumulativeTable <- curCumulativeTable %>% mutate(sx = cx  +  0.02 * ortho[1]) %>% mutate(ex = cx +  -0.02 * ortho[1])
curCumulativeTable <- curCumulativeTable %>% mutate(sy = cy  +  0.02 * ortho[2]) %>% mutate(ey = cy +  -0.02 * ortho[2])
curCumulativeTable  <- curCumulativeTable %>% mutate(bcx= (.data[[cumulativeName]] - .data[[cumulativeFreq]]) * dirVector$x )
}
}
curCumulativeTable  <- curCumulativeTable %>% mutate(bcx= (.data[[cumulativeName]] - .data[[cumulativeFreq]]) * dirVector$x ) %>% mutate(bcy= (.data[[cumulativeName]] - .data[[cumulativeFreq]]) * dirVector$y )
if( length(cumulativeList) > 0){
catVars <- names(cumulativeList)
for( catName in catVars){
dirVector <- lines[paste0(catName,".1"),]
cumulativeName <- paste0(catName,".Cumulative")
cumulativeFreq <- paste0(catName,".freq")
ndirVector <- dirVector / sqrt(sum(dirVector^2))
ortho <- c(-ndirVector$y, ndirVector$x)
curCumulativeTable <- cumulativeList[[catName]]
curCumulativeTable  <- curCumulativeTable %>% mutate(cx= .data[[cumulativeName]] * dirVector$x ) %>% mutate(cy= .data[[cumulativeName]] * dirVector$y )
curCumulativeTable <- curCumulativeTable %>% mutate(sx = cx  +  0.02 * ortho[1]) %>% mutate(ex = cx +  -0.02 * ortho[1])
curCumulativeTable <- curCumulativeTable %>% mutate(sy = cy  +  0.02 * ortho[2]) %>% mutate(ey = cy +  -0.02 * ortho[2])
curCumulativeTable  <- curCumulativeTable %>% mutate(bcx= (.data[[cumulativeName]] - .data[[cumulativeFreq]]) * dirVector$x ) %>% mutate(bcy= (.data[[cumulativeName]] - .data[[cumulativeFreq]]) * dirVector$y )
curCumulativeTable <- curCumulativeTable %>% mutate(bsx = bcx  +  0.02 * ortho[1]) %>% mutate(bex = bcx +  -0.02 * ortho[1])
curCumulativeTable <- curCumulativeTable %>% mutate(bsy = bcy  +  0.02 * ortho[2]) %>% mutate(bey = bcy +  -0.02 * ortho[2])
}
}
curCumulativeTable %>%  gather( x, a , c(sx, ex, bsx, bex))
if( length(cumulativeList) > 0){
catVars <- names(cumulativeList)
for( catName in catVars){
dirVector <- lines[paste0(catName,".1"),]
cumulativeName <- paste0(catName,".Cumulative")
cumulativeFreq <- paste0(catName,".freq")
ndirVector <- dirVector / sqrt(sum(dirVector^2))
ortho <- c(-ndirVector$y, ndirVector$x)
curCumulativeTable <- cumulativeList[[catName]]
curCumulativeTable  <- curCumulativeTable %>% mutate(cx= .data[[cumulativeName]] * dirVector$x ) %>% mutate(cy= .data[[cumulativeName]] * dirVector$y )
curCumulativeTable <- curCumulativeTable %>% mutate(sx = cx  +  0.02 * ortho[1]) %>% mutate(ex = cx +  -0.02 * ortho[1])
curCumulativeTable <- curCumulativeTable %>% mutate(sy = cy  +  0.02 * ortho[2]) %>% mutate(ey = cy +  -0.02 * ortho[2])
curCumulativeTable  <- curCumulativeTable %>% mutate(bcx= (.data[[cumulativeName]] - .data[[cumulativeFreq]]) * dirVector$x ) %>% mutate(bcy= (.data[[cumulativeName]] - .data[[cumulativeFreq]]) * dirVector$y )
curCumulativeTable <- curCumulativeTable %>% mutate(bsx = bcx  +  0.02 * ortho[1]) %>% mutate(bex = bcx +  -0.02 * ortho[1])
curCumulativeTable <- curCumulativeTable %>% mutate(bsy = bcy  +  0.02 * ortho[2]) %>% mutate(bey = bcy +  -0.02 * ortho[2])
curCumulativeTable %>%  gather( orig_x, x , c(sx, ex, bsx, bex))
}
}
View(curCumulativeTable)
curCumulativeTable %>%  gather( orig_x, x , c(sx, ex, bsx, bex))
curCumulativeTable %>%  gather( orig_x, x , c(sx, ex, bsx, bex)) %>%  gather( orig_y, y , c(sy, ey, bsy, bey))
source("./utils.R")
StarCoordinates <- function(data, numericRepresentation=TRUE, colorVar = NULL, meanCentered = TRUE, approach="Standard", projMatrix=NULL) {
inputCheck <- errorCatching(data,  colorVar,  approach, projectionMatrix )
if (!is.null(inputCheck)){
if (inputCheck$stop)  stop(inputCheck$errorMessage)
else warning(inputCheck$errorMessage)
}
odata <- data
frequencyList <- NULL
if (!is.null(colorVar)){
data[[colorVar]] <- NULL
}
if(numericRepresentation){
data <-  mutate_if(data, is.factor, as.numeric)
}
else {
frequencyList <- getFrequencyList(data)
}
ui <- miniPage(
useShinyjs(),
gadgetTitleBar("Star Coordinates"),
miniContentPanel(
plotOutput("plot", height = "100%", brush="plotBrush", hover=hoverOpts(id="plot_hover", delayType="throttle", delay= 150))
),
miniButtonBlock(
actionButton("zoomIn","", icon = icon("search-plus")),
actionButton("zoomOut","", icon = icon("search-minus")),
)
)
server <- function(input, output, session) {
highlightedIdx <- reactiveVal(-1)
helperValues <- reactiveValues()
helperValues$clicked <- FALSE
helperValues$movingDim <- -1
helperValues$plotLimit <- 1.5
cumulativeList <- list()
helperValues$projectionMatrix <- initProjectionMatrix(data, projMatrix)
rangedData <- getRangedData(data, numericRepresentation, meanCentered, frequencyList)
if (!is.null( frequencyList)){
catVars <- names(frequencyList)
for( catName in catVars){
cumulativeTable <- getCumulativeTable(frequencyList[[catName]])
cumulativeList[[catName]] <- cumulativeTable
}
}
observeEvent( input$plot_hover, {
helperValues$curX <- input$plot_hover$x
helperValues$curY <- input$plot_hover$y
currentClosest <- closestDimension(helperValues$projectionMatrix, helperValues$curX, helperValues$curY )
if (helperValues$clicked ){
session$resetBrush("plotBrush")
helperValues$projectionMatrix[helperValues$movingDim,1:2] <- c(helperValues$curX, helperValues$curY)
if (approach == "OSC"){
helperValues$projectionMatrix <- OSCRecondition(helperValues$projectionMatrix)
}
highlightedIdx(helperValues$movingDim)
}
else {
highlightedIdx(currentClosest)
}
})
mouseDown <- function(){
currentClosest <- closestDimension(helperValues$projectionMatrix, helperValues$curX, helperValues$curY )
if ( currentClosest != -1){
helperValues$movingDim <- currentClosest
helperValues$clicked <- TRUE
}
}
mouseUp <- function(){
helperValues$clicked <- FALSE
helperValues$movingDim <- -1
}
output$plot <- renderPlot({
drawDimensionVectors(helperValues$projectionMatrix, highlightedIdx(), cumulativeList ) +
getGGProjectedPoints(helperValues$projectionMatrix, rangedData, odata, colorVar) +
coord_cartesian(xlim = c(-helperValues$plotLimit,helperValues$plotLimit ), ylim = c(-helperValues$plotLimit,helperValues$plotLimit ))
},res=96)
observeEvent(input$cancel, {
stopApp(NULL)
})
onevent("mouseup", "plot", mouseUp())
onevent("mousedown","plot", mouseDown())
observeEvent(input$zoomIn,{ helperValues$plotLimit <-  helperValues$plotLimit*0.9 })
observeEvent(input$zoomOut,{ helperValues$plotLimit <-  helperValues$plotLimit*1.1 })
observeEvent(input$done, {
projMatrix  <- helperValues$projectionMatrix[,1:2]
if ( !is.null(colorVar)  && (colorVar %in% colnames(data))){
originalIdx <- which( colnames(odata) == colorVar)
if ( originalIdx == length(colnames(odata)))
projMatrix  <- rbind( projMatrix , rep.int(0,2))
else if ( originalIdx == 1)
projMatrix  <- rbind( rep.int(0,2),  projMatrix )
else
projMatrix <- rbind( projMatrix[1:(originalIdx-1),], rep.int(0,2), projMatrix[-(1:(originalIdx-1)),])
}
rownames( projMatrix) <- colnames(odata)
colnames( projMatrix) <- c("x","y")
projectedPoints <- getProjectedPoints(helperValues$projectionMatrix, rangedData )
selected <- brushedPoints(projectedPoints, input$plotBrush, allRows = TRUE )
result <- list(projMatrix, selected$selected_)
names(result) <- c("Proj.Matrix","Selection")
stopApp(result)
})
}
runGadget(ui, server)
}
StarCoordinates(iris, numericRepresentation=FALSE)
source("./utils.R")
StarCoordinates <- function(data, numericRepresentation=TRUE, colorVar = NULL, meanCentered = TRUE, approach="Standard", projMatrix=NULL) {
inputCheck <- errorCatching(data,  colorVar,  approach, projectionMatrix )
if (!is.null(inputCheck)){
if (inputCheck$stop)  stop(inputCheck$errorMessage)
else warning(inputCheck$errorMessage)
}
odata <- data
frequencyList <- NULL
if (!is.null(colorVar)){
data[[colorVar]] <- NULL
}
if(numericRepresentation){
data <-  mutate_if(data, is.factor, as.numeric)
}
else {
frequencyList <- getFrequencyList(data)
}
ui <- miniPage(
useShinyjs(),
gadgetTitleBar("Star Coordinates"),
miniContentPanel(
plotOutput("plot", height = "100%", brush="plotBrush", hover=hoverOpts(id="plot_hover", delayType="throttle", delay= 150))
),
miniButtonBlock(
actionButton("zoomIn","", icon = icon("search-plus")),
actionButton("zoomOut","", icon = icon("search-minus")),
)
)
server <- function(input, output, session) {
highlightedIdx <- reactiveVal(-1)
helperValues <- reactiveValues()
helperValues$clicked <- FALSE
helperValues$movingDim <- -1
helperValues$plotLimit <- 1.5
cumulativeList <- list()
helperValues$projectionMatrix <- initProjectionMatrix(data, projMatrix)
rangedData <- getRangedData(data, numericRepresentation, meanCentered, frequencyList)
if (!is.null( frequencyList)){
catVars <- names(frequencyList)
for( catName in catVars){
cumulativeTable <- getCumulativeTable(frequencyList[[catName]])
cumulativeList[[catName]] <- cumulativeTable
}
}
observeEvent( input$plot_hover, {
helperValues$curX <- input$plot_hover$x
helperValues$curY <- input$plot_hover$y
currentClosest <- closestDimension(helperValues$projectionMatrix, helperValues$curX, helperValues$curY )
if (helperValues$clicked ){
session$resetBrush("plotBrush")
helperValues$projectionMatrix[helperValues$movingDim,1:2] <- c(helperValues$curX, helperValues$curY)
if (approach == "OSC"){
helperValues$projectionMatrix <- OSCRecondition(helperValues$projectionMatrix)
}
highlightedIdx(helperValues$movingDim)
}
else {
highlightedIdx(currentClosest)
}
})
mouseDown <- function(){
currentClosest <- closestDimension(helperValues$projectionMatrix, helperValues$curX, helperValues$curY )
if ( currentClosest != -1){
helperValues$movingDim <- currentClosest
helperValues$clicked <- TRUE
}
}
mouseUp <- function(){
helperValues$clicked <- FALSE
helperValues$movingDim <- -1
}
output$plot <- renderPlot({
drawDimensionVectors(helperValues$projectionMatrix, highlightedIdx(), cumulativeList ) +
getGGProjectedPoints(helperValues$projectionMatrix, rangedData, odata, colorVar) +
coord_cartesian(xlim = c(-helperValues$plotLimit,helperValues$plotLimit ), ylim = c(-helperValues$plotLimit,helperValues$plotLimit ))
},res=96)
observeEvent(input$cancel, {
stopApp(NULL)
})
onevent("mouseup", "plot", mouseUp())
onevent("mousedown","plot", mouseDown())
observeEvent(input$zoomIn,{ helperValues$plotLimit <-  helperValues$plotLimit*0.9 })
observeEvent(input$zoomOut,{ helperValues$plotLimit <-  helperValues$plotLimit*1.1 })
observeEvent(input$done, {
projMatrix  <- helperValues$projectionMatrix[,1:2]
if ( !is.null(colorVar)  && (colorVar %in% colnames(data))){
originalIdx <- which( colnames(odata) == colorVar)
if ( originalIdx == length(colnames(odata)))
projMatrix  <- rbind( projMatrix , rep.int(0,2))
else if ( originalIdx == 1)
projMatrix  <- rbind( rep.int(0,2),  projMatrix )
else
projMatrix <- rbind( projMatrix[1:(originalIdx-1),], rep.int(0,2), projMatrix[-(1:(originalIdx-1)),])
}
rownames( projMatrix) <- colnames(odata)
colnames( projMatrix) <- c("x","y")
projectedPoints <- getProjectedPoints(helperValues$projectionMatrix, rangedData )
selected <- brushedPoints(projectedPoints, input$plotBrush, allRows = TRUE )
result <- list(projMatrix, selected$selected_)
names(result) <- c("Proj.Matrix","Selection")
stopApp(result)
})
}
runGadget(ui, server)
}
StarCoordinates(iris, numericRepresentation=FALSE)
curCumulativeTable <- curCumulativeTable %>%  gather( orig_x, x , c(sx, ex, bex, bsx)) %>%  gather( orig_y, y , c(sy, ey, bey, bsy))
source("./utils.R")
StarCoordinates <- function(data, numericRepresentation=TRUE, colorVar = NULL, meanCentered = TRUE, approach="Standard", projMatrix=NULL) {
inputCheck <- errorCatching(data,  colorVar,  approach, projectionMatrix )
if (!is.null(inputCheck)){
if (inputCheck$stop)  stop(inputCheck$errorMessage)
else warning(inputCheck$errorMessage)
}
odata <- data
frequencyList <- NULL
if (!is.null(colorVar)){
data[[colorVar]] <- NULL
}
if(numericRepresentation){
data <-  mutate_if(data, is.factor, as.numeric)
}
else {
frequencyList <- getFrequencyList(data)
}
ui <- miniPage(
useShinyjs(),
gadgetTitleBar("Star Coordinates"),
miniContentPanel(
plotOutput("plot", height = "100%", brush="plotBrush", hover=hoverOpts(id="plot_hover", delayType="throttle", delay= 150))
),
miniButtonBlock(
actionButton("zoomIn","", icon = icon("search-plus")),
actionButton("zoomOut","", icon = icon("search-minus")),
)
)
server <- function(input, output, session) {
highlightedIdx <- reactiveVal(-1)
helperValues <- reactiveValues()
helperValues$clicked <- FALSE
helperValues$movingDim <- -1
helperValues$plotLimit <- 1.5
cumulativeList <- list()
helperValues$projectionMatrix <- initProjectionMatrix(data, projMatrix)
rangedData <- getRangedData(data, numericRepresentation, meanCentered, frequencyList)
if (!is.null( frequencyList)){
catVars <- names(frequencyList)
for( catName in catVars){
cumulativeTable <- getCumulativeTable(frequencyList[[catName]])
cumulativeList[[catName]] <- cumulativeTable
}
}
observeEvent( input$plot_hover, {
helperValues$curX <- input$plot_hover$x
helperValues$curY <- input$plot_hover$y
currentClosest <- closestDimension(helperValues$projectionMatrix, helperValues$curX, helperValues$curY )
if (helperValues$clicked ){
session$resetBrush("plotBrush")
helperValues$projectionMatrix[helperValues$movingDim,1:2] <- c(helperValues$curX, helperValues$curY)
if (approach == "OSC"){
helperValues$projectionMatrix <- OSCRecondition(helperValues$projectionMatrix)
}
highlightedIdx(helperValues$movingDim)
}
else {
highlightedIdx(currentClosest)
}
})
mouseDown <- function(){
currentClosest <- closestDimension(helperValues$projectionMatrix, helperValues$curX, helperValues$curY )
if ( currentClosest != -1){
helperValues$movingDim <- currentClosest
helperValues$clicked <- TRUE
}
}
mouseUp <- function(){
helperValues$clicked <- FALSE
helperValues$movingDim <- -1
}
output$plot <- renderPlot({
drawDimensionVectors(helperValues$projectionMatrix, highlightedIdx(), cumulativeList ) +
getGGProjectedPoints(helperValues$projectionMatrix, rangedData, odata, colorVar) +
coord_cartesian(xlim = c(-helperValues$plotLimit,helperValues$plotLimit ), ylim = c(-helperValues$plotLimit,helperValues$plotLimit ))
},res=96)
observeEvent(input$cancel, {
stopApp(NULL)
})
onevent("mouseup", "plot", mouseUp())
onevent("mousedown","plot", mouseDown())
observeEvent(input$zoomIn,{ helperValues$plotLimit <-  helperValues$plotLimit*0.9 })
observeEvent(input$zoomOut,{ helperValues$plotLimit <-  helperValues$plotLimit*1.1 })
observeEvent(input$done, {
projMatrix  <- helperValues$projectionMatrix[,1:2]
if ( !is.null(colorVar)  && (colorVar %in% colnames(data))){
originalIdx <- which( colnames(odata) == colorVar)
if ( originalIdx == length(colnames(odata)))
projMatrix  <- rbind( projMatrix , rep.int(0,2))
else if ( originalIdx == 1)
projMatrix  <- rbind( rep.int(0,2),  projMatrix )
else
projMatrix <- rbind( projMatrix[1:(originalIdx-1),], rep.int(0,2), projMatrix[-(1:(originalIdx-1)),])
}
rownames( projMatrix) <- colnames(odata)
colnames( projMatrix) <- c("x","y")
projectedPoints <- getProjectedPoints(helperValues$projectionMatrix, rangedData )
selected <- brushedPoints(projectedPoints, input$plotBrush, allRows = TRUE )
result <- list(projMatrix, selected$selected_)
names(result) <- c("Proj.Matrix","Selection")
stopApp(result)
})
}
runGadget(ui, server)
}
StarCoordinates(iris, numericRepresentation=FALSE)
source("./utils.R")
StarCoordinates <- function(data, numericRepresentation=TRUE, colorVar = NULL, meanCentered = TRUE, approach="Standard", projMatrix=NULL) {
inputCheck <- errorCatching(data,  colorVar,  approach, projectionMatrix )
if (!is.null(inputCheck)){
if (inputCheck$stop)  stop(inputCheck$errorMessage)
else warning(inputCheck$errorMessage)
}
odata <- data
frequencyList <- NULL
if (!is.null(colorVar)){
data[[colorVar]] <- NULL
}
if(numericRepresentation){
data <-  mutate_if(data, is.factor, as.numeric)
}
else {
frequencyList <- getFrequencyList(data)
}
ui <- miniPage(
useShinyjs(),
gadgetTitleBar("Star Coordinates"),
miniContentPanel(
plotOutput("plot", height = "100%", brush="plotBrush", hover=hoverOpts(id="plot_hover", delayType="throttle", delay= 150))
),
miniButtonBlock(
actionButton("zoomIn","", icon = icon("search-plus")),
actionButton("zoomOut","", icon = icon("search-minus")),
)
)
server <- function(input, output, session) {
highlightedIdx <- reactiveVal(-1)
helperValues <- reactiveValues()
helperValues$clicked <- FALSE
helperValues$movingDim <- -1
helperValues$plotLimit <- 1.5
cumulativeList <- list()
helperValues$projectionMatrix <- initProjectionMatrix(data, projMatrix)
rangedData <- getRangedData(data, numericRepresentation, meanCentered, frequencyList)
if (!is.null( frequencyList)){
catVars <- names(frequencyList)
for( catName in catVars){
cumulativeTable <- getCumulativeTable(frequencyList[[catName]])
cumulativeList[[catName]] <- cumulativeTable
}
}
observeEvent( input$plot_hover, {
helperValues$curX <- input$plot_hover$x
helperValues$curY <- input$plot_hover$y
currentClosest <- closestDimension(helperValues$projectionMatrix, helperValues$curX, helperValues$curY )
if (helperValues$clicked ){
session$resetBrush("plotBrush")
helperValues$projectionMatrix[helperValues$movingDim,1:2] <- c(helperValues$curX, helperValues$curY)
if (approach == "OSC"){
helperValues$projectionMatrix <- OSCRecondition(helperValues$projectionMatrix)
}
highlightedIdx(helperValues$movingDim)
}
else {
highlightedIdx(currentClosest)
}
})
mouseDown <- function(){
currentClosest <- closestDimension(helperValues$projectionMatrix, helperValues$curX, helperValues$curY )
if ( currentClosest != -1){
helperValues$movingDim <- currentClosest
helperValues$clicked <- TRUE
}
}
mouseUp <- function(){
helperValues$clicked <- FALSE
helperValues$movingDim <- -1
}
output$plot <- renderPlot({
drawDimensionVectors(helperValues$projectionMatrix, highlightedIdx(), cumulativeList ) +
getGGProjectedPoints(helperValues$projectionMatrix, rangedData, odata, colorVar) +
coord_cartesian(xlim = c(-helperValues$plotLimit,helperValues$plotLimit ), ylim = c(-helperValues$plotLimit,helperValues$plotLimit ))
},res=96)
observeEvent(input$cancel, {
stopApp(NULL)
})
onevent("mouseup", "plot", mouseUp())
onevent("mousedown","plot", mouseDown())
observeEvent(input$zoomIn,{ helperValues$plotLimit <-  helperValues$plotLimit*0.9 })
observeEvent(input$zoomOut,{ helperValues$plotLimit <-  helperValues$plotLimit*1.1 })
observeEvent(input$done, {
projMatrix  <- helperValues$projectionMatrix[,1:2]
if ( !is.null(colorVar)  && (colorVar %in% colnames(data))){
originalIdx <- which( colnames(odata) == colorVar)
if ( originalIdx == length(colnames(odata)))
projMatrix  <- rbind( projMatrix , rep.int(0,2))
else if ( originalIdx == 1)
projMatrix  <- rbind( rep.int(0,2),  projMatrix )
else
projMatrix <- rbind( projMatrix[1:(originalIdx-1),], rep.int(0,2), projMatrix[-(1:(originalIdx-1)),])
}
rownames( projMatrix) <- colnames(odata)
colnames( projMatrix) <- c("x","y")
projectedPoints <- getProjectedPoints(helperValues$projectionMatrix, rangedData )
selected <- brushedPoints(projectedPoints, input$plotBrush, allRows = TRUE )
result <- list(projMatrix, selected$selected_)
names(result) <- c("Proj.Matrix","Selection")
stopApp(result)
})
}
runGadget(ui, server)
}
StarCoordinates(iris, numericRepresentation=FALSE)
